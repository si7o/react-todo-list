{"version":3,"sources":["logo.svg","components/header/Header.jsx","components/todos/components/todo-summary/TodoSummary.jsx","components/todos/components/todo-add/TodoAdd.jsx","components/todos/components/todo-list/TodoItem.jsx","components/todos/components/todo-list/TodoList.jsx","components/todos/Todos.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","title","logoImage","isLoading","loading","className","src","alt","TodoSummary","todoList","pendigTodos","filter","todo","done","length","doneTodos","TodoAdd","addTodoHandler","useState","todoText","setTodoText","addTodoClick","type","placeholder","value","onChange","event","target","onKeyPress","e","key","onClick","disabled","TodoItem","item","index","toggleTodoHandler","removeTodoHandler","text","TodoList","items","todoItemList","map","Todos","todoItems","setTodoItems","loadedItems","setLoadedItems","useEffect","setTimeout","fetch","then","r","json","data","console","log","newTodoItems","slice","concat","todoIndex","App","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a36689cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './Header.scss'\r\n\r\nexport default function Header({title, logoImage, isLoading=true}) {\r\n    const loading = isLoading ? (\r\n        <span className=\"loading\">(loading...)</span>\r\n        ): '';\r\n\r\n    return (\r\n        <header>\r\n            <img src={logoImage} className={' logo '+ (isLoading ? 'loading':'')} alt=\"logo\" />                     \r\n            <div className=\"title\">\r\n                {title} {loading}\r\n            </div>   \r\n        </header>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './TodoSummary.scss'\r\n\r\nexport default function TodoSummary({todoList}) {\r\n    const pendigTodos = todoList?.filter((todo) => todo.done === false).length;\r\n    const doneTodos = todoList?.filter((todo) => todo.done === true).length;\r\n\r\n    return (\r\n        <div className=\"todo-summary\">\r\n            <div className=\"pending\">\r\n                Pending ToDo(s): <span>{pendigTodos}</span>\r\n            </div>\r\n            <div className=\"completed\">\r\n                Done ToDo(s): <span>{doneTodos}</span>\r\n            </div>\r\n        </div>        \r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport './TodoAdd.scss'\r\n\r\nexport default function TodoAdd({addTodoHandler}) {\r\n    const [todoText, setTodoText] = useState('')\r\n\r\n    function handleTodoTextChange(event) {\r\n        setTodoText(event.target.value)\r\n    }\r\n\r\n    function handleKeyDown(e) {\r\n        if (e.key === 'Enter') {\r\n            addTodoClick()\r\n        }\r\n    } \r\n\r\n    function addTodoClick() {\r\n        addTodoHandler(todoText)        \r\n        setTodoText('')\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo-add\">\r\n            <input \r\n                type=\"text\"\r\n                placeholder=\"type todo text here\" \r\n                value={todoText} \r\n                onChange={handleTodoTextChange}\r\n                onKeyPress={handleKeyDown}/>\r\n            <button onClick={addTodoClick} disabled={todoText.length===0}>\r\n                Add todo\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './TodoItem.scss'\r\n\r\nexport default function TodoItem({item, index, toggleTodoHandler, removeTodoHandler}) {\r\n\r\n    return (\r\n        <li className={'todo-item ' + (item.done ? 'completed':'')}>\r\n            <button className=\"complete\" alt=\"Mark as done\" title=\"Mark as done\" onClick={() => toggleTodoHandler(index)}>\r\n                &#x2713;\r\n            </button>\r\n            <span className=\"text\">\r\n                {item.text}\r\n            </span>\r\n            <button className=\"remove\" alt=\"Remove\" title=\"Remove\" onClick={() => removeTodoHandler(item.text)}>\r\n                &#x1f5d1;\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TodoItem from './TodoItem'\r\n\r\nimport './TodoList.scss'\r\n\r\nexport default function TodoList({items, toggleTodoHandler, removeTodoHandler}) {\r\n\r\n    const todoItemList = items?.map((todo, index) => \r\n        <TodoItem \r\n            item={todo}\r\n            key={index}\r\n            index={index}\r\n            toggleTodoHandler={toggleTodoHandler} \r\n            removeTodoHandler={removeTodoHandler} />\r\n    )\r\n\r\n    return (\r\n        <ul className=\"todo-list\">\r\n            {todoItemList}\r\n        </ul>\r\n    )\r\n}\r\n","import React, {useState, useEffect}  from 'react'\r\n\r\nimport Header from '../header/Header'\r\nimport TodoSummary from './components/todo-summary/TodoSummary'\r\nimport TodoAdd from './components/todo-add/TodoAdd'\r\nimport TodoList from './components/todo-list/TodoList'\r\n\r\nconst todoDataUrl = '/data/todos.json'\r\n\r\nexport default function Todos({logoImage}) {\r\n    // state\r\n    const [todoItems, setTodoItems] = useState([])\r\n    const [loadedItems, setLoadedItems] = useState(false)\r\n\r\n    // fetch todos from file\r\n    useEffect(() => {\r\n        // delay the request so we can see the spinner :D\r\n        setTimeout( () => {\r\n            if (!loadedItems)\r\n                fetch(todoDataUrl)            \r\n                    .then((r) => r.json())\r\n                    .then((data) => {\r\n                        console.log('todo(s) loaded')\r\n                        \r\n                        setLoadedItems(true)\r\n                        setTodoItems(data)\r\n                    })\r\n        }, 1000)\r\n    })\r\n\r\n    // event handlers\r\n\r\n    function addTodo(todoText) {\r\n        console.log(`add todo \"${todoText}\"`);\r\n        const todo = {\r\n          text: todoText,\r\n          done: false,\r\n    }\r\n    \r\n    const newTodoItems = todoItems.slice().concat(todo)\r\n        \r\n        setTodoItems(newTodoItems)    \r\n    }\r\n       \r\n    function toggleTodo(todoIndex) {\r\n        console.log(`toggle todo \"${todoIndex}\"`);\r\n        const newTodoItems = todoItems.slice()\r\n        todoItems[todoIndex].done= !todoItems[todoIndex].done\r\n    \r\n        setTodoItems(newTodoItems)\r\n    }\r\n    \r\n    function removeTodo(todoText) {\r\n        console.log(`remove todo \"${todoText}\"`);    \r\n        const newTodoItems = todoItems.filter((todo) => todo.text!==todoText)   \r\n        \r\n        setTodoItems(newTodoItems)\r\n    }\r\n\r\n    // component\r\n    return (        \r\n        <div className=\"todos\">\r\n            <Header title=\"Todo list\" logoImage={logoImage} isLoading={!loadedItems}/>\r\n\r\n            <TodoSummary \r\n                todoList={todoItems} />\r\n            <TodoAdd \r\n                todoList={todoItems} \r\n                addTodoHandler={addTodo}/>\r\n            <TodoList \r\n                items={todoItems} \r\n                toggleTodoHandler={toggleTodo}\r\n                removeTodoHandler={removeTodo}/>                \r\n        </div>\r\n    )    \r\n}\r\n","import React from 'react';\n\nimport './App.css';\nimport logo from './logo.svg'\n\nimport Todos from './components/todos/Todos';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todos logoImage={logo}/>      \n    </div>\n  )\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}